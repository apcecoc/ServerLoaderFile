__version__ = (1, 5, 1)

#        ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà      
#       ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà

#              ¬© Copyright 2025
#           https://t.me/apcecoc
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @apcecoc

import os
import logging
import asyncio
import io
import shutil
import uuid
from telethon.errors import FilePartMissingError
from .. import loader, utils
from ..inline.types import InlineCall
from telethon.tl.types import Message
from typing import Union

logger = logging.getLogger(__name__)

@loader.tds
class ServerLoaderFile(loader.Module):
    strings = {
        "name": "ServerLoaderFile",
        "_cls_doc": "–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ Telegram. –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã –¥–æ 4 –ì–ë.",
        "invalid_dir": "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
        "no_path": "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.",
        "no_file_reply": "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º.",
        "saving_file": "üöÄ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª '{filename}' –≤ '{path}'...",
        "file_saved": "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {path}",
        "save_error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {error}",
        "no_access_save": "üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {error}",
        "code_prompt": "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è —Ñ–∞–π–ª–∞ (ID: {query_id}):",
        "send_confirm": "üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª {filename} –∫–∞–∫ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç...",
        "send_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {error}",
        "no_access_dir": "üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {error}",
        "sending_file": "üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...",
        "file_not_found": "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}",
        "no_access_file": "üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {error}",
        "folder_deleted": "‚úÖ –ü–∞–ø–∫–∞ –∏ –≤—Å—ë –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–¥–∞–ª–µ–Ω—ã.",
        "file_deleted": "‚úÖ –§–∞–π–ª —É–¥–∞–ª—ë–Ω.",
        "delete_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {error}",
        "no_access_delete": "üö´ –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {error}",
        "no_inline_bot": "‚ùå Inline-–±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.",
        "no_chat_id": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞.",
        "current_dir": "üß≠ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:\n`{path}`",
        "back_button": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "download_button": "‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å",
        "delete_button": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        "cancel_button": "‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞"
    }

    strings_en = {
        "name": "ServerLoaderFile",
        "_cls_doc": "A module for managing server files via Telegram. Allows uploading, saving, and deleting files up to 4 GB.",
        "invalid_dir": "‚ùå The specified path is not a directory or does not exist.",
        "no_path": "‚ö†Ô∏è You must specify a directory path.",
        "no_file_reply": "‚ö†Ô∏è You must reply to a message with a file.",
        "saving_file": "üöÄ Saving file '{filename}' to '{path}'...",
        "file_saved": "‚úÖ File successfully saved to: {path}",
        "save_error": "‚ùå An error occurred while saving the file: {error}",
        "no_access_save": "üö´ No permission to write to directory: {error}",
        "code_prompt": "üìù Enter the code for the file (ID: {query_id}):",
        "send_confirm": "üöÄ Sending file {filename} as a single document...",
        "send_error": "‚ùå Error sending file: {error}",
        "no_access_dir": "üö´ No permission to access directory: {error}",
        "sending_file": "üöÄ Sending file...",
        "file_not_found": "‚ùå File not found: {path}",
        "no_access_file": "üö´ No permission to read file: {error}",
        "folder_deleted": "‚úÖ Folder and its contents deleted.",
        "file_deleted": "‚úÖ File deleted.",
        "delete_error": "‚ùå Error deleting: {error}",
        "no_access_delete": "üö´ No permission to delete: {error}",
        "no_inline_bot": "‚ùå Inline bot is not activated or not responding.",
        "no_chat_id": "‚ùå Failed to determine chat_id for sending file.",
        "current_dir": "üß≠ Current directory:\n`{path}`",
        "back_button": "‚¨ÖÔ∏è Back",
        "download_button": "‚¨áÔ∏è Download",
        "delete_button": "üóëÔ∏è Delete",
        "cancel_button": "‚¨ÖÔ∏è Cancel"
    }

    strings_es = {
        "name": "ServerLoaderFile",
        "_cls_doc": "Un m√≥dulo para gestionar archivos del servidor a trav√©s de Telegram. Permite subir, guardar y eliminar archivos hasta 4 GB.",
        "invalid_dir": "‚ùå La ruta especificada no es un directorio o no existe.",
        "no_path": "‚ö†Ô∏è Debes especificar una ruta de directorio.",
        "no_file_reply": "‚ö†Ô∏è Debes responder a un mensaje con un archivo.",
        "saving_file": "üöÄ Guardando el archivo '{filename}' en '{path}'...",
        "file_saved": "‚úÖ Archivo guardado exitosamente en: {path}",
        "save_error": "‚ùå Ocurri√≥ un error al guardar el archivo: {error}",
        "no_access_save": "üö´ No tienes permiso para escribir en el directorio: {error}",
        "code_prompt": "üìù Ingresa el c√≥digo para el archivo (ID: {query_id}):",
        "send_confirm": "üöÄ Enviando el archivo {filename} como un solo documento...",
        "send_error": "‚ùå Error al enviar el archivo: {error}",
        "no_access_dir": "üö´ No tienes permiso para acceder al directorio: {error}",
        "sending_file": "üöÄ Enviando archivo...",
        "file_not_found": "‚ùå Archivo no encontrado: {path}",
        "no_access_file": "üö´ No tienes permiso para leer el archivo: {error}",
        "folder_deleted": "‚úÖ Carpeta y su contenido eliminados.",
        "file_deleted": "‚úÖ Archivo eliminado.",
        "delete_error": "‚ùå Error al eliminar: {error}",
        "no_access_delete": "üö´ No tienes permiso para eliminar: {error}",
        "no_inline_bot": "‚ùå El bot en l√≠nea no est√° activado o no responde.",
        "no_chat_id": "‚ùå No se pudo determinar el chat_id para enviar el archivo.",
        "current_dir": "üß≠ Directorio actual:\n`{path}`",
        "back_button": "‚¨ÖÔ∏è Atr√°s",
        "download_button": "‚¨áÔ∏è Descargar",
        "delete_button": "üóëÔ∏è Eliminar",
        "cancel_button": "‚¨ÖÔ∏è Cancelar"
    }

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        try:
            self._inline_bot = await client.get_entity(self.inline.bot_id)
        except Exception as e:
            await client.send_message("me", self.strings["no_inline_bot"])

    @loader.command(ru_doc="–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.", en_doc="Opens the file manager for the specified directory.", es_doc="Abre el gestor de archivos para el directorio especificado.")
    async def sfile(self, message: Message):
        args = utils.get_args_raw(message)
        path = args if args else os.getcwd()

        if not os.path.isdir(path):
            return await utils.answer(message, self.strings["invalid_dir"])

        await self._render_panel(message, path, message.chat_id)

    @loader.command(ru_doc="–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª, –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π –∫ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", en_doc="Saves a file attached to a reply to the specified directory on the server.", es_doc="Guarda un archivo adjunto a una respuesta en el directorio especificado en el servidor.")
    async def svf(self, message: Message):
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()

        if not args:
            await utils.answer(message, self.strings["no_path"])
            return

        if not reply or not reply.file:
            await utils.answer(message, self.strings["no_file_reply"])
            return

        filename = reply.file.name or "untitled"
        file_path = os.path.join(args, filename)

        await utils.answer(message, self.strings["saving_file"].format(filename=filename, path=file_path))

        try:
            await self._client.download_media(reply, file_path)
            await utils.answer(message, self.strings["file_saved"].format(path=file_path))
        except PermissionError as e:
            await utils.answer(message, self.strings["no_access_save"].format(error=str(e)))
        except Exception as e:
            await utils.answer(message, self.strings["save_error"].format(error=str(e)))

    async def _render_panel(self, call: Union[Message, InlineCall], path: str, chat_id: int):
        path = os.path.abspath(path)
        buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –º—ã –Ω–µ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if path != '/' and path != os.path.abspath('/'):
            buttons.append([{"text": self.strings["back_button"], "callback": self._render_panel, "args": (os.path.dirname(path), chat_id)}])

        try:
            if not os.path.exists(path):
                raise OSError("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            items = os.listdir(path)
        except (PermissionError, OSError) as e:
            msg = self.strings["no_access_dir"].format(error=str(e))
            logger.error("Failed to access directory %s: %s", path, e)
            if isinstance(call, InlineCall):
                await call.answer(msg)
            else:
                await utils.answer(call, msg)
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
        items.sort(key=lambda x: (not os.path.isdir(os.path.join(path, x)), x.lower()))

        for item in items:
            full_path = os.path.join(path, item)
            is_dir = os.path.isdir(full_path)
            emoji = "üìÅ" if is_dir else "üìÑ"
            buttons.append([{"text": f"{emoji} {item}", "callback": self._handle_item, "args": (full_path, is_dir, chat_id)}])

        caption = self.strings["current_dir"].format(path=path)

        try:
            if isinstance(call, InlineCall):
                await call.edit(caption, reply_markup=buttons)
            else:
                await self.inline.form(caption, message=call, reply_markup=buttons)
        except Exception as e:
            logger.exception("Error rendering panel for %s", path)
            await call.answer(self.strings["send_error"].format(error=str(e)))

    async def _handle_item(self, call: InlineCall, path: str, is_dir: bool, chat_id: int):
        if is_dir:
            await self._render_panel(call, path, chat_id)
        else:
            await call.edit(f"üìÑ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: `{path}`\n\n–ß—Ç–æ —Å –Ω–∏–º —Å–¥–µ–ª–∞—Ç—å?", reply_markup=[
                [
                    {"text": self.strings["download_button"], "callback": self._download_file, "args": (path, chat_id)},
                    {"text": self.strings["delete_button"], "callback": self._delete_file, "args": (path, chat_id)},
                ],
                [{"text": self.strings["cancel_button"], "callback": self._render_panel, "args": (os.path.dirname(path), chat_id)}]
            ])

    async def _download_file(self, call: InlineCall, path: str, chat_id: int):
        await call.answer(self.strings["sending_file"])

        try:
            if not os.path.exists(path):
                await call.answer(self.strings["file_not_found"].format(path=path))
                return

            await self._send_as_one(call, path, chat_id)
        except (PermissionError, OSError) as e:
            await call.answer(self.strings["no_access_file"].format(error=str(e)))
        except Exception as e:
            await call.answer(self.strings["send_error"].format(error=str(e)))

    async def _send_as_one(self, call: InlineCall, path: str, chat_id: int, progress_msg):
        # –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        animation_chars = ["‚è≥", "‚åõ", "üîÑ", "‚ö°"]
        animation_index = 0
        
        async def update_animation():
            nonlocal animation_index
            while True:
                await asyncio.sleep(0.5)
                animation_index = (animation_index + 1) % len(animation_chars)
                try:
                    await progress_msg.edit(
                        f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª `{os.path.basename(path)}`...\n{animation_chars[animation_index]} –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞ Telegram..."
                    )
                except:
                    break

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        animation_task = asyncio.create_task(update_animation())

        try:
            with open(path, 'rb') as f:
                await self._client.send_file(
                    chat_id,
                    file=await self._client.upload_file(f),
                    caption=os.path.basename(path),
                    force_document=True
                )
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            animation_task.cancel()
            await progress_msg.delete()
            
        except FilePartMissingError:
            animation_task.cancel()
            await progress_msg.edit(self.strings["send_error"].format(error="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"))
        except Exception as e:
            animation_task.cancel()
            await progress_msg.edit(self.strings["send_error"].format(error=str(e)))

    async def _delete_file(self, call: InlineCall, path: str, chat_id: int):
        try:
            if os.path.isdir(path):
                shutil.rmtree(path)
                await call.answer(self.strings["folder_deleted"])
            else:
                os.remove(path)
                await call.answer(self.strings["file_deleted"])
            await self._render_panel(call, os.path.dirname(path), chat_id)
        except (PermissionError, OSError) as e:
            await call.answer(self.strings["no_access_delete"].format(error=str(e)))
        except Exception as e:
            await call.answer(self.strings["delete_error"].format(error=str(e)))